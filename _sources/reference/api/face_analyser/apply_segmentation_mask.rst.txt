.. index:: 
  !FaceAnalyser.applySegmentationMask Method
  
.. _face_analyser_apply_segmentation_mask_class_method:

===============================================================================
FaceAnalyser.applySegmentationMask Method
===============================================================================

Module: :ref:`FaceAnalyser<face_analyser_class>`

Definition
----------

Applies the face segmentation mask to suppress the background.


.. tab-set::

    .. tab-item:: C
      :sync: C

      .. code:: C

        int id3FaceAnalyser_ApplySegmentationMask (
            ID3_FACE_ANALYSER hFaceAnalyser, 
            ID3_FACE_IMAGE hImage, 
            ID3_FACE_IMAGE hSegmentationMask, 
            int backgroundColor, 
            ID3_FACE_IMAGE hSegmentedFace)

      **Parameters**

        .. line-block::

          ``hFaceAnalyser`` :ref:`ID3_FACE_ANALYSER<face_analyser_class>`
          :guilabel:`in` Handle to the FaceAnalyser object.

          ``hImage`` :ref:`ID3_FACE_IMAGE<image_class>`
          :guilabel:`in` Source image to process.

          ``hSegmentationMask`` :ref:`ID3_FACE_IMAGE<image_class>`
          :guilabel:`in` Mask of segmented face.

          ``backgroundColor`` int
          :guilabel:`in` Color of the background.

          ``hSegmentedFace`` :ref:`ID3_FACE_IMAGE<image_class>`
          :guilabel:`out` The segmented face


      **Returns**

        .. line-block::

          ``int``
          An error code.
          See :ref:`id3FaceError<face_error_enum>` file for the list of possible error codes.

    .. tab-item:: Dart
      :sync: Dart

      .. code:: Dart

        Image applySegmentationMask(Image image, Image segmentationMask, int backgroundColor)

      **Parameters**

        .. line-block::

          ``image`` :ref:`Image<image_class>`
          :guilabel:`in` Source image to process.

          ``segmentationMask`` :ref:`Image<image_class>`
          :guilabel:`in` Mask of segmented face.

          ``backgroundColor`` int
          :guilabel:`in` Color of the background.


      **Returns**

        .. line-block::

          :ref:`Image<image_class>`
          The segmented face

      **Exceptions**

        .. line-block::

          :ref:`FaceException<face_exception>`
          An error has occurred during Face Library execution.


    .. tab-item:: C#
      :sync: C#

      .. code:: C#

        public Image ApplySegmentationMask(Image image, Image segmentationMask, int backgroundColor)

      **Parameters**

        .. line-block::

          ``image`` :ref:`Image<image_class>`
          :guilabel:`in` Source image to process.

          ``segmentationMask`` :ref:`Image<image_class>`
          :guilabel:`in` Mask of segmented face.

          ``backgroundColor`` int
          :guilabel:`in` Color of the background.


      **Returns**

        .. line-block::

          :ref:`Image<image_class>`
          The segmented face

      **Exceptions**

        .. line-block::

          :ref:`FaceException<face_exception>`
          An error has occurred during Face Library execution.


    .. tab-item:: Java
      :sync: Java

      .. code:: Java

        public Image applySegmentationMask(Image image, Image segmentationMask, int backgroundColor) throws FaceException

      **Parameters**

        .. line-block::

          ``image`` :ref:`Image<image_class>`
          :guilabel:`in` Source image to process.

          ``segmentationMask`` :ref:`Image<image_class>`
          :guilabel:`in` Mask of segmented face.

          ``backgroundColor`` int
          :guilabel:`in` Color of the background.


      **Returns**

        .. line-block::

          :ref:`Image<image_class>`
          The segmented face

      **Exceptions**

        .. line-block::

          :ref:`FaceException<face_exception>`
          An error has occurred during Face Library execution.


    .. tab-item:: Python
      :sync: Python

      .. code:: Python

        apply_segmentation_mask(self, image: Image, segmentation_mask: Image, background_color: int) -> Image

      **Parameters**

        .. line-block::

          ``image`` :ref:`Image<image_class>`
          :guilabel:`in` Source image to process.

          ``segmentation_mask`` :ref:`Image<image_class>`
          :guilabel:`in` Mask of segmented face.

          ``background_color`` int
          :guilabel:`in` Color of the background.


      **Returns**

        .. line-block::

          :ref:`Image<image_class>`
          The segmented face

      **Exceptions**

        .. line-block::

          :ref:`FaceException<face_exception>`
          An error has occurred during Face Library execution.


    .. tab-item:: Swift
      :sync: Swift

      .. code:: Swift

        public func applySegmentationMask(image: Image, segmentationMask: Image, backgroundColor: Int32) throws -> Image

      **Parameters**

        .. line-block::

          ``image`` :ref:`Image<image_class>`
          :guilabel:`in` Source image to process.

          ``segmentationMask`` :ref:`Image<image_class>`
          :guilabel:`in` Mask of segmented face.

          ``backgroundColor`` Int32
          :guilabel:`in` Color of the background.


      **Returns**

        .. line-block::

          :ref:`Image<image_class>`
          The segmented face

      **Exceptions**

        .. line-block::

          :ref:`FaceException<face_exception>`
          An error has occurred during Face Library execution.



