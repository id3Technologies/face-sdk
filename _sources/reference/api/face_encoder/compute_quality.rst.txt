.. index:: 
  !FaceEncoder.computeQuality Method
  
.. _face_encoder_compute_quality_class_method:

===============================================================================
FaceEncoder.computeQuality Method
===============================================================================

Module: :ref:`FaceEncoder<face_encoder_class>`

Definition
----------

Computes the quality of a detected face.

Here, quality expresses the match capability of an image: a high quality image will generate less match errors (false acceptance or false rejection) than a low quality one.

.. warning:: A minimum interocular distance (IOD) of 30 pixels for the detected face is required for this function, below this value it will output an error.

.. important:: Loading the FaceEncodingQualityEstimator3A model is required to use this function.


.. tab-set::

    .. tab-item:: C
      :sync: C

      .. code:: C

        int id3FaceEncoder_ComputeQuality (
            ID3_FACE_ENCODER hFaceEncoder, 
            ID3_FACE_IMAGE hImage, 
            ID3_DETECTED_FACE hDetectedFace, 
            int * quality)

      **Parameters**

        .. line-block::

          ``hFaceEncoder`` :ref:`ID3_FACE_ENCODER<face_encoder_class>`
          :guilabel:`in` Handle to the FaceEncoder object.

          ``hImage`` :ref:`ID3_FACE_IMAGE<image_class>`
          :guilabel:`in` Source image to process.

          ``hDetectedFace`` :ref:`ID3_DETECTED_FACE<detected_face_class>`
          :guilabel:`in` Detected face to process.

          ``quality`` int *
          :guilabel:`out` The estimated quality of the detected face. Range is [0:100].


      **Returns**

        .. line-block::

          ``int``
          An error code.
          See :ref:`id3FaceError<face_error_enum>` file for the list of possible error codes.

    .. tab-item:: Dart
      :sync: Dart

      .. code:: Dart

        int computeQuality(Image image, DetectedFace detectedFace)

      **Parameters**

        .. line-block::

          ``image`` :ref:`Image<image_class>`
          :guilabel:`in` Source image to process.

          ``detectedFace`` :ref:`DetectedFace<detected_face_class>`
          :guilabel:`in` Detected face to process.


      **Returns**

        .. line-block::

          ``int``
          The estimated quality of the detected face. Range is [0:100].

      **Exceptions**

        .. line-block::

          :ref:`FaceException<face_exception>`
          An error has occurred during Face Library execution.


    .. tab-item:: C#
      :sync: C#

      .. code:: C#

        public int ComputeQuality(Image image, DetectedFace detectedFace)

      **Parameters**

        .. line-block::

          ``image`` :ref:`Image<image_class>`
          :guilabel:`in` Source image to process.

          ``detectedFace`` :ref:`DetectedFace<detected_face_class>`
          :guilabel:`in` Detected face to process.


      **Returns**

        .. line-block::

          ``int``
          The estimated quality of the detected face. Range is [0:100].

      **Exceptions**

        .. line-block::

          :ref:`FaceException<face_exception>`
          An error has occurred during Face Library execution.


    .. tab-item:: Java
      :sync: Java

      .. code:: Java

        public int computeQuality(Image image, DetectedFace detectedFace) throws FaceException

      **Parameters**

        .. line-block::

          ``image`` :ref:`Image<image_class>`
          :guilabel:`in` Source image to process.

          ``detectedFace`` :ref:`DetectedFace<detected_face_class>`
          :guilabel:`in` Detected face to process.


      **Returns**

        .. line-block::

          ``int``
          The estimated quality of the detected face. Range is [0:100].

      **Exceptions**

        .. line-block::

          :ref:`FaceException<face_exception>`
          An error has occurred during Face Library execution.


    .. tab-item:: Python
      :sync: Python

      .. code:: Python

        compute_quality(self, image: Image, detected_face: DetectedFace) -> int

      **Parameters**

        .. line-block::

          ``image`` :ref:`Image<image_class>`
          :guilabel:`in` Source image to process.

          ``detected_face`` :ref:`DetectedFace<detected_face_class>`
          :guilabel:`in` Detected face to process.


      **Returns**

        .. line-block::

          ``int``
          The estimated quality of the detected face. Range is [0:100].

      **Exceptions**

        .. line-block::

          :ref:`FaceException<face_exception>`
          An error has occurred during Face Library execution.


    .. tab-item:: Swift
      :sync: Swift

      .. code:: Swift

        public func computeQuality(image: Image, detectedFace: DetectedFace) throws -> Int32

      **Parameters**

        .. line-block::

          ``image`` :ref:`Image<image_class>`
          :guilabel:`in` Source image to process.

          ``detectedFace`` :ref:`DetectedFace<detected_face_class>`
          :guilabel:`in` Detected face to process.


      **Returns**

        .. line-block::

          ``Int``
          The estimated quality of the detected face. Range is [0:100].

      **Exceptions**

        .. line-block::

          :ref:`FaceException<face_exception>`
          An error has occurred during Face Library execution.



